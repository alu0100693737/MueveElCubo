/* parser generated by jison 0.4.4 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"BODY":3,"BLOCK":4,"EOF":5,"INIT_BLOCK":6,"MAIN_BLOCK":7,"END_BLOCK":8,"LINE":9,"DECLARATION":10,"INSTRUCTION":11,"CONTROL":12,"INT":13,"FLOAT":14,"VEC":15,"ADD_LINE":16,"T_TINT":17,"T_ID":18,"=":19,"OPERATION_INT":20,"T_TFLOAT":21,"T_FLOAT":22,"T_TVEC":23,"T_VEC":24,"+":25,"-":26,"T_INT":27,"OPERATION_FLOAT":28,"IF":29,"ELSE":30,"WHILE":31,"INIT_IF":32,"BLOCK_CONT":33,"T_IF":34,"(":35,"COMP":36,")":37,"\\n":38,"if":39,"{":40,"}":41,"INIT_ELSE":42,"T_ELSE":43,"T_WHILE":44,"T_COMP":45,"T_INST0":46,"INST1VEC":47,"INST1FLOAT":48,"T_INST1VEC":49,"T_INST1FLOAT":50,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",17:"T_TINT",18:"T_ID",19:"=",21:"T_TFLOAT",22:"T_FLOAT",23:"T_TVEC",24:"T_VEC",25:"+",26:"-",27:"T_INT",34:"T_IF",35:"(",37:")",38:"\\n",39:"if",40:"{",41:"}",43:"T_ELSE",44:"T_WHILE",45:"T_COMP",46:"T_INST0",49:"T_INST1VEC",50:"T_INST1FLOAT"},
productions_: [0,[3,2],[4,3],[6,0],[7,2],[7,1],[8,0],[9,1],[9,1],[9,1],[10,1],[10,1],[10,1],[13,5],[13,3],[13,4],[14,4],[15,4],[20,3],[20,3],[20,1],[28,3],[28,3],[28,1],[12,1],[12,1],[12,1],[29,2],[32,4],[32,7],[33,3],[33,5],[33,5],[33,7],[30,4],[30,6],[42,0],[31,5],[36,3],[36,3],[11,2],[11,2],[11,2],[47,2],[48,2],[16,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
	      /* Ejecuciones finales */
	      console.log (" +++ Estado final del hash de variables globales +++");
	      console.log (globalVar);
	      console.log ("Ejecucion Finalizada. -----------------------------------------");
	   
break;
case 3:
	      /* Inicializar estructuras de datos para el bloque. */
	      localHashIndex = localHashIndex + 1;
	      localHashList[localHashIndex] = {};
	      console.log(" +++ Inicializando Bloque " + localHashIndex + ": ");
	   
break;
case 6:
	      /* Ejecuciones finales de un bloque */
	      console.log (" +++ Finalizando BLoque " + localHashIndex);
	      console.log (localHashList[localHashIndex]);
	      console.log (" ++++++++++++++++++++++++++++++++++++++++++ \n");
	      localHashList.splice(localHashIndex, 1); // Eliminar las variables locales de vector  de mapas
	      localHashIndex = localHashIndex - 1;
	      //ignoreActualBlock = false;
	   
break;
case 13:
	      if (searchID ($$[$0-2]) > -1) {
	         console.log (" --- ERROR en la linea " + lineNumberAct + ": \n --- --- Variable previamente declarada");  
	      } else {
	         if (!ignoreActualBlock ) {
	            localHashList[localHashIndex][$$[$0-2]] = $$[$0];
	         }
	      }
	      
	   
break;
case 14:
	      if (searchID ($$[$0]) > -1) {
	         console.log (" --- ERROR en la linea " + lineNumberAct + ": \n --- --- Variable previamente declarada");
	      } else {
	         if (!ignoreActualBlock ) {
	            localHashList[localHashIndex][$$[$0]] = 0;
	         }
	      }
	   
break;
case 15:
	      var posID = searchID ($$[$0-2]);
	      if (posID > -1) {
	         if (!ignoreActualBlock ) {
	            localHashList[posID][$$[$0-2]] = $$[$0];
	         }
	      } else {
	         console.log (" --- ERROR en la linea " + lineNumberAct + ": \n --- --- Variable sin declaradar");
	      }
	   
break;
case 18:
	      this.$ = $$[$0-2] + $$[$0];
	   
break;
case 19:
	      this.$ = $$[$0-2] - $$[$0];
	   
break;
case 20:
	     this.$ = Number(yytext);
	   
break;
case 21:
	      this.$ = $$[$0-2] + $$[$0];
	   
break;
case 22:
	      this.$ = $$[$0-2] - $$[$0];
	   
break;
case 23:
	     this.$ = Number(yytext);
	   
break;
case 28:
	      if (!$$[$0-1]) {
	         ignoreActualBlock = true;
	      }
	   
break;
case 29:
	         ignoreActualBlock = true;
	      
break;
case 36:
	      ignoreActualBlock = !ignoreActualBlock;     
	   
break;
case 38:
	      var posID = searchID($$[$0-2]);
	      var result = false;
	      if ( posID > -1 ) {
	         switch($$[$0-1]) {
		    case "==":
		    if ( localHashList[posID][$$[$0-2]] == $$[$0] ) {
		      result = true;
		    }
		    break;
		    case "!=":
		    if ( localHashList[posID][$$[$0-2]] != $$[$0] ) {
		      result = true;
		    }
		    break;
		    case ">":
		    if ( localHashList[posID][$$[$0-2]] > $$[$0] ) {
		      result = true;
		    }
		    break;
		    case "<":
		    if ( localHashList[posID][$$[$0-2]] < $$[$0] ) {
		      result = true;
		    }
		    break;
		    case ">=":
		    if ( localHashList[posID][$$[$0-2]] >= $$[$0] ) {
		      result = true;
		    }
		    break;
		    case "<=":
		    if ( localHashList[posID][$$[$0-2]] <= $$[$0] ) {
		      result = true;
		    }
		    break;
	         }
	      } else {
	         console.log (" --- ERROR en la linea " + lineNumberAct + ": \n --- --- Variable sin declarar en una comparacion");
	      } 
	      this.$ = result;
	   
break;
case 45:
	      ++lineNumberAct;
	   
break;
}
},
table: [{3:1,4:2,6:3,17:[2,3],18:[2,3],21:[2,3],23:[2,3],34:[2,3],44:[2,3],46:[2,3],49:[2,3],50:[2,3]},{1:[3]},{5:[1,4]},{7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:[2,45],18:[2,45],21:[1,17],23:[1,18],29:14,30:15,31:16,32:19,34:[1,21],44:[1,20],46:[2,45],49:[2,45],50:[2,45]},{1:[2,1]},{5:[2,6],8:22,38:[2,6],41:[2,6]},{5:[2,5],7:23,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:[2,45],18:[2,45],21:[1,17],23:[1,18],29:14,30:15,31:16,32:19,34:[1,21],38:[2,5],41:[2,5],44:[1,20],46:[2,45],49:[2,45],50:[2,45]},{5:[2,7],17:[2,7],18:[2,7],21:[2,7],23:[2,7],34:[2,7],38:[2,7],41:[2,7],44:[2,7],46:[2,7],49:[2,7],50:[2,7]},{5:[2,8],17:[2,8],18:[2,8],21:[2,8],23:[2,8],34:[2,8],38:[2,8],41:[2,8],44:[2,8],46:[2,8],49:[2,8],50:[2,8]},{5:[2,9],17:[2,9],18:[2,9],21:[2,9],23:[2,9],34:[2,9],38:[2,9],41:[2,9],44:[2,9],46:[2,9],49:[2,9],50:[2,9]},{5:[2,10],17:[2,10],18:[2,10],21:[2,10],23:[2,10],34:[2,10],38:[2,10],41:[2,10],44:[2,10],46:[2,10],49:[2,10],50:[2,10]},{5:[2,11],17:[2,11],18:[2,11],21:[2,11],23:[2,11],34:[2,11],38:[2,11],41:[2,11],44:[2,11],46:[2,11],49:[2,11],50:[2,11]},{5:[2,12],17:[2,12],18:[2,12],21:[2,12],23:[2,12],34:[2,12],38:[2,12],41:[2,12],44:[2,12],46:[2,12],49:[2,12],50:[2,12]},{17:[1,27],18:[1,28],46:[1,24],47:25,48:26,49:[1,29],50:[1,30]},{5:[2,24],17:[2,24],18:[2,24],21:[2,24],23:[2,24],34:[2,24],38:[2,24],41:[2,24],42:31,43:[2,36],44:[2,24],46:[2,24],49:[2,24],50:[2,24]},{5:[2,25],17:[2,25],18:[2,25],21:[2,25],23:[2,25],34:[2,25],38:[2,25],41:[2,25],44:[2,25],46:[2,25],49:[2,25],50:[2,25]},{5:[2,26],17:[2,26],18:[2,26],21:[2,26],23:[2,26],34:[2,26],38:[2,26],41:[2,26],44:[2,26],46:[2,26],49:[2,26],50:[2,26]},{18:[1,32]},{18:[1,33]},{33:34,40:[1,35]},{35:[1,36]},{35:[1,37]},{5:[2,2],38:[2,2],41:[2,2]},{5:[2,4],38:[2,4],41:[2,4]},{5:[2,40],17:[2,40],18:[2,40],21:[2,40],23:[2,40],34:[2,40],38:[2,40],41:[2,40],44:[2,40],46:[2,40],49:[2,40],50:[2,40]},{5:[2,41],17:[2,41],18:[2,41],21:[2,41],23:[2,41],34:[2,41],38:[2,41],41:[2,41],44:[2,41],46:[2,41],49:[2,41],50:[2,41]},{5:[2,42],17:[2,42],18:[2,42],21:[2,42],23:[2,42],34:[2,42],38:[2,42],41:[2,42],44:[2,42],46:[2,42],49:[2,42],50:[2,42]},{18:[1,38]},{19:[1,39]},{24:[1,40]},{22:[1,41]},{43:[1,42]},{19:[1,43]},{19:[1,44]},{5:[2,27],17:[2,27],18:[2,27],21:[2,27],23:[2,27],34:[2,27],38:[2,27],41:[2,27],43:[2,27],44:[2,27],46:[2,27],49:[2,27],50:[2,27]},{4:45,6:3,17:[2,3],18:[2,3],21:[2,3],23:[2,3],34:[2,3],38:[1,46],44:[2,3],46:[2,3],49:[2,3],50:[2,3]},{18:[1,48],36:47},{18:[1,48],36:49},{5:[2,14],17:[2,14],18:[2,14],19:[1,50],21:[2,14],23:[2,14],34:[2,14],38:[2,14],41:[2,14],44:[2,14],46:[2,14],49:[2,14],50:[2,14]},{20:51,27:[1,52]},{5:[2,43],17:[2,43],18:[2,43],21:[2,43],23:[2,43],34:[2,43],38:[2,43],41:[2,43],44:[2,43],46:[2,43],49:[2,43],50:[2,43]},{5:[2,44],17:[2,44],18:[2,44],21:[2,44],23:[2,44],34:[2,44],38:[2,44],41:[2,44],44:[2,44],46:[2,44],49:[2,44],50:[2,44]},{33:53,38:[1,54],40:[1,35]},{22:[1,55]},{24:[1,56]},{38:[1,58],41:[1,57]},{16:59,17:[2,45],18:[2,45],21:[2,45],23:[2,45],34:[2,45],44:[2,45],46:[2,45],49:[2,45],50:[2,45]},{37:[1,60]},{45:[1,61]},{37:[1,62]},{20:63,27:[1,52]},{5:[2,15],17:[2,15],18:[2,15],21:[2,15],23:[2,15],25:[1,64],26:[1,65],34:[2,15],38:[2,15],41:[2,15],44:[2,15],46:[2,15],49:[2,15],50:[2,15]},{5:[2,20],17:[2,20],18:[2,20],21:[2,20],23:[2,20],25:[2,20],26:[2,20],34:[2,20],37:[2,20],38:[2,20],41:[2,20],44:[2,20],46:[2,20],49:[2,20],50:[2,20]},{5:[2,34],17:[2,34],18:[2,34],21:[2,34],23:[2,34],34:[2,34],38:[2,34],41:[2,34],44:[2,34],46:[2,34],49:[2,34],50:[2,34]},{16:66,40:[2,45]},{5:[2,16],17:[2,16],18:[2,16],21:[2,16],23:[2,16],34:[2,16],38:[2,16],41:[2,16],44:[2,16],46:[2,16],49:[2,16],50:[2,16]},{5:[2,17],17:[2,17],18:[2,17],21:[2,17],23:[2,17],34:[2,17],38:[2,17],41:[2,17],44:[2,17],46:[2,17],49:[2,17],50:[2,17]},{5:[2,30],17:[2,30],18:[2,30],21:[2,30],23:[2,30],34:[2,30],38:[2,30],41:[2,30],43:[2,30],44:[2,30],46:[2,30],49:[2,30],50:[2,30]},{16:67,41:[2,45]},{4:68,6:3,17:[2,3],18:[2,3],21:[2,3],23:[2,3],34:[2,3],44:[2,3],46:[2,3],49:[2,3],50:[2,3]},{33:69,40:[1,35]},{18:[1,71],20:70,27:[1,52]},{38:[1,72],40:[2,28]},{5:[2,13],17:[2,13],18:[2,13],21:[2,13],23:[2,13],25:[1,64],26:[1,65],34:[2,13],38:[2,13],41:[2,13],44:[2,13],46:[2,13],49:[2,13],50:[2,13]},{20:73,27:[1,52]},{20:74,27:[1,52]},{33:75,40:[1,35]},{41:[1,76]},{38:[1,78],41:[1,77]},{5:[2,37],17:[2,37],18:[2,37],21:[2,37],23:[2,37],34:[2,37],38:[2,37],41:[2,37],44:[2,37],46:[2,37],49:[2,37],50:[2,37]},{25:[1,64],26:[1,65],37:[2,38]},{37:[2,39]},{16:79,39:[2,45]},{5:[2,18],17:[2,18],18:[2,18],21:[2,18],23:[2,18],25:[2,18],26:[2,18],34:[2,18],37:[2,18],38:[2,18],41:[2,18],44:[2,18],46:[2,18],49:[2,18],50:[2,18]},{5:[2,19],17:[2,19],18:[2,19],21:[2,19],23:[2,19],25:[2,19],26:[2,19],34:[2,19],37:[2,19],38:[2,19],41:[2,19],44:[2,19],46:[2,19],49:[2,19],50:[2,19]},{5:[2,35],17:[2,35],18:[2,35],21:[2,35],23:[2,35],34:[2,35],38:[2,35],41:[2,35],44:[2,35],46:[2,35],49:[2,35],50:[2,35]},{5:[2,32],17:[2,32],18:[2,32],21:[2,32],23:[2,32],34:[2,32],38:[2,32],41:[2,32],43:[2,32],44:[2,32],46:[2,32],49:[2,32],50:[2,32]},{5:[2,31],17:[2,31],18:[2,31],21:[2,31],23:[2,31],34:[2,31],38:[2,31],41:[2,31],43:[2,31],44:[2,31],46:[2,31],49:[2,31],50:[2,31]},{16:80,41:[2,45]},{39:[1,81]},{41:[1,82]},{40:[2,29]},{5:[2,33],17:[2,33],18:[2,33],21:[2,33],23:[2,33],34:[2,33],38:[2,33],41:[2,33],43:[2,33],44:[2,33],46:[2,33],49:[2,33],50:[2,33]}],
defaultActions: {4:[2,1],71:[2,39],81:[2,29]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


   /*Inicializando estructuras de datos*/

   // Hash para almacenar el uso de variables globales
   var globalVar = {};

   // Array de los diversos hash locales por cada bloque creado
   // Usar como una pila
   var localHashList = new Array ();
   var localHashIndex = -1;

   // Variables de control
   var lineNumberAct = 0;
   var ignoreActualBlock = false;

   // Funciones globales ---
   /*
    * Funcion encargada de buscar el id de una variable en los diversos mapas locales 
    * creados hasta ese momento y nos da la posici�n en el vector de mapas.
    * Retorna -1 en caso de no encontrar el id buscado.
    */
   function searchID (text) {
      var foundVar = false;
      var i = 0;
      while (!foundVar && (i < localHashIndex + 1)) {
         if (text in localHashList[i]) {
            foundVar = true;
         } else {
            ++i;
         }
      } 
      if (!foundVar) {
         i = -1;
      }
      return i;
   }

   console.log ("Inicializando ejecucion... ------------------------------");
/* generated by jison-lex 0.2.0 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            if (this.options.backtrack_lexer) {
                delete backup;
            }
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        if (this.options.backtrack_lexer) {
            delete backup;
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* empty */
break;
case 1:return 38;
break;
case 2:return 45;
break;
case 3:return 25;
break;
case 4:return 26;
break;
case 5:return 19;
break;
case 6:return 46;
break;
case 7:return 49;
break;
case 8:return 50;
break;
case 9:return 34;
break;
case 10:return 44;
break;
case 11:return 43;
break;
case 12:return 17;
break;
case 13:return 21;
break;
case 14:return 23;
break;
case 15:return 35;
break;
case 16:return 37;
break;
case 17:return 40;
break;
case 18:return 41;
break;
case 19:return 22;
break;
case 20:return 27;
break;
case 21:return 24;
break;
case 22:return 18;
break;
case 23:return 5;
break;
}
},
rules: [/^(?:\s+)/,/^(?:\n\b)/,/^(?:==|!=|<|>|<=|>=)/,/^(?:\+)/,/^(?:-)/,/^(?:=)/,/^(?:stop\b)/,/^(?:move\b)/,/^(?:turn|pitch|yaw|accel|decel\b)/,/^(?:if\b)/,/^(?:while\b)/,/^(?:else\b)/,/^(?:int\b)/,/^(?:float\b)/,/^(?:vec\b)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:[0-9]+(\.[0-9]+)\b)/,/^(?:[0-9]+\b)/,/^(?:\([0-9]+(\.[0-9]+)\b,[0-9]+(\.[0-9]+)\b,[0-9]+(\.[0-9]+)\b\))/,/^(?:[_a-z][_a-zA-Z0-9]*)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}